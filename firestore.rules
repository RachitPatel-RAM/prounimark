rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isStudent() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isFaculty() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'faculty';
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail() {
      return request.auth.token.email.matches('.*@darshan\\.ac\\.in$');
    }
    
    function isValidEnrollmentNumber(enrollmentNumber) {
      return enrollmentNumber is string && 
             enrollmentNumber.size() >= 6 && 
             enrollmentNumber.matches('[A-Za-z0-9]+');
    }
    
    function isActiveUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isActive == true;
    }
    
    function isDeviceBound() {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userData.deviceBinding != null && 
             userData.deviceBinding.instIdHash == request.resource.data.deviceBinding.instIdHash;
    }
    
    function isWithinRadius(sessionLocation, userLocation, radius) {
      let lat1 = sessionLocation.latitude;
      let lng1 = sessionLocation.longitude;
      let lat2 = userLocation.latitude;
      let lng2 = userLocation.longitude;
      
      // Simple distance calculation (approximation)
      let latDiff = lat2 - lat1;
      let lngDiff = lng2 - lng1;
      let distance = math.sqrt(latDiff * latDiff + lngDiff * lngDiff) * 111000; // Rough conversion to meters
      
      return distance <= radius;
    }
    
    function isSessionActive(sessionId) {
      let session = get(/databases/$(database)/documents/sessions/$(sessionId)).data;
      let now = request.time;
      return session.isActive == true && 
             now >= session.startTime && 
             now <= session.endTime;
    }
    
    function isValidSessionCode(sessionId, code) {
      let session = get(/databases/$(database)/documents/sessions/$(sessionId)).data;
      return session.code == code;
    }
    
    function isStudentEligibleForSession(sessionId) {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let session = get(/databases/$(database)/documents/sessions/$(sessionId)).data;
      
      return userData.branch == session.branch &&
             userData.classId == session.classId &&
             userData.batchId == session.batchId;
    }
    
    function hasNotMarkedAttendance(sessionId) {
      return !exists(/databases/$(database)/documents/attendance/$(sessionId + '_' + request.auth.uid));
    }
    
    function isValidTimestamp(attendanceTime) {
      let now = request.time;
      let diff = now.seconds - attendanceTime.seconds;
      return diff >= 0 && diff <= 300; // Within 5 minutes
    }

    // Users collection
    match /users/{userId} {
      // Allow read access to own data or by admin
      allow read: if isOwner(userId) || isAdmin() || (isAuthenticated() && userId == 'admin');
      
      // Allow write access only during registration or by admin
      allow create: if (isAuthenticated() && 
                       isValidEmail() && 
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasAll(['name', 'email', 'role', 'enrollmentNo', 'branch', 'classId', 'batchId', 'deviceBinding', 'createdAt', 'updatedAt']) &&
                       request.resource.data.role == 'student' &&
                       isValidEnrollmentNumber(request.resource.data.enrollmentNo) &&
                       request.resource.data.deviceBinding != null &&
                       request.resource.data.deviceBinding.keys().hasAll(['instIdHash', 'platform', 'boundAt'])) ||
                      (isAdmin() && 
                       request.resource.data.role in ['faculty', 'admin'] &&
                       request.resource.data.keys().hasAll(['name', 'email', 'role', 'createdAt', 'updatedAt'])) ||
                      // Allow admin user creation for system initialization (no auth required)
                      (userId == 'admin' && 
                       request.resource.data.role == 'admin' &&
                       request.resource.data.keys().hasAll(['name', 'email', 'role', 'createdAt', 'updatedAt']));
      
      // Allow update only by admin or for security-related fields
      allow update: if (isAdmin() || 
                       (isOwner(userId) && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['pinHash', 'updatedAt']))) &&
                      request.resource.data.role == resource.data.role &&
                      (request.resource.data.enrollmentNo == resource.data.enrollmentNo || isAdmin()) &&
                      (request.resource.data.branch == resource.data.branch || isAdmin()) &&
                      (request.resource.data.classId == resource.data.classId || isAdmin()) &&
                      (request.resource.data.batchId == resource.data.batchId || isAdmin());
      
      // Allow delete only by admin
      allow delete: if isAdmin();
    }
    
    // Device bindings collection
    match /device_bindings/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.keys().hasAll(['userId', 'deviceUuid', 'instIdHash', 'platform', 'boundAt', 'isActive']) &&
                      request.resource.data.userId == userId;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Branches collection
    match /branches/{branchId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Classes collection
    match /classes/{classId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Batches collection
    match /batches/{batchId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if isAuthenticated() && isActiveUser();
      allow create: if isFaculty() && 
                      request.resource.data.keys().hasAll(['facultyId', 'course', 'className', 'sessionCode', 'startTime', 'studentsPresent', 'gpsLocation', 'radius', 'isActive', 'createdAt', 'updatedAt']) &&
                      request.resource.data.facultyId == request.auth.uid &&
                      request.resource.data.sessionCode is string &&
                      request.resource.data.sessionCode.size() == 3 &&
                      request.resource.data.gpsLocation != null &&
                      request.resource.data.gpsLocation.keys().hasAll(['latitude', 'longitude', 'accuracy']) &&
                      request.resource.data.radius is number &&
                      request.resource.data.radius >= 100 &&
                      request.resource.data.radius <= 1000 &&
                      request.resource.data.studentsPresent is list;
      
      allow update: if (isFaculty() && request.resource.data.facultyId == request.auth.uid) ||
                      isAdmin();
      
      allow delete: if isAdmin();
    }
    
    // Attendance collection
    match /attendance/{attendanceId} {
      allow read: if isAuthenticated() && isActiveUser();
      
      // Allow students to mark attendance
      allow create: if isStudent() && 
                      isActiveUser() &&
                      request.resource.data.keys().hasAll(['sessionId', 'studentId', 'markedAt', 'location', 'distance', 'isPresent', 'createdAt', 'updatedAt']) &&
                      request.resource.data.studentId == request.auth.uid &&
                      request.resource.data.isPresent == true &&
                      isValidTimestamp(request.resource.data.markedAt) &&
                      isSessionActive(request.resource.data.sessionId) &&
                      isStudentEligibleForSession(request.resource.data.sessionId) &&
                      hasNotMarkedAttendance(request.resource.data.sessionId) &&
                      isDeviceBound() &&
                      request.resource.data.location != null &&
                      request.resource.data.location.keys().hasAll(['latitude', 'longitude', 'accuracy']) &&
                      request.resource.data.distance is number &&
                      request.resource.data.distance <= 500;
      
      // Allow faculty to update attendance
      allow update: if isFaculty() || isAdmin();
      
      // Allow delete only by admin
      allow delete: if isAdmin();
    }
    
    // Session codes collection (for validation)
    match /session_codes/{codeId} {
      allow read: if isAuthenticated() && isActiveUser();
      allow write: if isFaculty() || isAdmin();
    }
    
    // Audit logs collection
    match /auditLogs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Legacy audit_logs collection (for backward compatibility)
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // System configuration
    match /system/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
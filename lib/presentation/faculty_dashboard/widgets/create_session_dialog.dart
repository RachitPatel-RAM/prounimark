import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart';
import '../../../core/app_export.dart';
import '../../../models/user_model.dart';
import '../../../models/session_model.dart';
import '../../../services/attendance_service.dart';
import '../../../services/location_service.dart' as location_service;

class CreateSessionDialog extends StatefulWidget {
  final UserModel facultyUser;

  const CreateSessionDialog({
    super.key,
    required this.facultyUser,
  });

  @override
  State<CreateSessionDialog> createState() => _CreateSessionDialogState();
}

class _CreateSessionDialogState extends State<CreateSessionDialog> {
  final AttendanceService _attendanceService = AttendanceService();
  final location_service.LocationService _locationService = location_service.LocationService();
  final _formKey = GlobalKey<FormState>();
  
  String? _selectedCourse;
  String? _selectedClass;
  final List<String> _selectedBatches = [];
  bool _isLoading = false;
  String? _error;
  location_service.LocationData? _currentLocation;

  // Mock data - in real app, this would come from Firestore
  final List<String> _courses = [
    'Data Structures',
    'Algorithms',
    'Database Systems',
    'Software Engineering',
    'Computer Networks',
  ];

  final List<String> _classes = [
    'CE-1',
    'CE-2',
    'CE-3',
    'IT-1',
    'IT-2',
  ];

  final List<String> _batches = [
    'A',
    'B',
    'C',
  ];

  @override
  void initState() {
    super.initState();
    _getCurrentLocation();
  }

  Future<void> _getCurrentLocation() async {
    try {
      final locationResult = await _locationService.getCurrentLocation();
      if (locationResult.isSuccess) {
        setState(() {
          _currentLocation = locationResult.location;
        });
      }
    } catch (e) {
      // Handle location error
    }
  }

  Future<void> _createSession() async {
    if (!_formKey.currentState!.validate()) return;
    if (_currentLocation == null) {
      setState(() {
        _error = 'Location is required to create a session';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _error = null;
    });

    try {
      final session = SessionModel(
        id: '', // Will be generated by Firestore
        facultyId: widget.facultyUser.id,
        course: _selectedCourse!,
        className: _selectedClass!,
        batchName: _selectedBatches.isEmpty ? null : _selectedBatches.join(', '),
        sessionCode: _generateSessionCode(),
        startTime: DateTime.now(),
        endTime: null,
        studentsPresent: [],
        gpsLocation: _currentLocation!,
        radius: 500, // 500 meters
        isActive: true,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      final result = await _attendanceService.createSession(session);
      
      if (result.isSuccess) {
        if (mounted) {
          Navigator.pop(context, true);
        }
      } else {
        setState(() {
          _error = result.error ?? 'Failed to create session';
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _error = 'Failed to create session: $e';
        _isLoading = false;
      });
    }
  }

  String _generateSessionCode() {
    // Generate a 3-digit session code
    final random = DateTime.now().millisecondsSinceEpoch % 1000;
    return random.toString().padLeft(3, '0');
  }

  String? _validateCourse(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please select a course';
    }
    return null;
  }

  String? _validateClass(String? value) {
    if (value == null || value.isEmpty) {
      return 'Please select a class';
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16),
      ),
      child: Container(
        width: 90.w,
        constraints: BoxConstraints(maxHeight: 80.h),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Header
            Container(
              padding: EdgeInsets.all(4.w),
              decoration: BoxDecoration(
                color: AppTheme.lightTheme.colorScheme.primary,
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(16),
                  topRight: Radius.circular(16),
                ),
              ),
              child: Row(
                children: [
                  Icon(
                    Icons.play_circle,
                    color: Colors.white,
                    size: 6.w,
                  ),
                  SizedBox(width: 3.w),
                  Expanded(
                    child: Text(
                      'Start Attendance Session',
                      style: AppTheme.lightTheme.textTheme.titleLarge?.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                  IconButton(
                    onPressed: () => Navigator.of(context).pop(false),
                    icon: Icon(
                      Icons.close,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
            
            // Form
            Flexible(
              child: SingleChildScrollView(
                padding: EdgeInsets.all(4.w),
                child: Form(
                  key: _formKey,
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Course Selection
                      Text(
                        'Course',
                        style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(
                          color: AppTheme.lightTheme.colorScheme.onSurface,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      SizedBox(height: 1.h),
                      DropdownButtonFormField<String>(
                        initialValue: _selectedCourse,
                        decoration: InputDecoration(
                          hintText: 'Select a course',
                          prefixIcon: Icon(Icons.book),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        items: _courses.map((course) {
                          return DropdownMenuItem(
                            value: course,
                            child: Text(course),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedCourse = value;
                          });
                        },
                        validator: _validateCourse,
                      ),
                      
                      SizedBox(height: 3.h),
                      
                      // Class Selection
                      Text(
                        'Class',
                        style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(
                          color: AppTheme.lightTheme.colorScheme.onSurface,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      SizedBox(height: 1.h),
                      DropdownButtonFormField<String>(
                        initialValue: _selectedClass,
                        decoration: InputDecoration(
                          hintText: 'Select a class',
                          prefixIcon: Icon(Icons.class_),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(8),
                          ),
                        ),
                        items: _classes.map((classItem) {
                          return DropdownMenuItem(
                            value: classItem,
                            child: Text(classItem),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedClass = value;
                          });
                        },
                        validator: _validateClass,
                      ),
                      
                      SizedBox(height: 3.h),
                      
                      // Batch Selection (Optional)
                      Text(
                        'Batch (Optional)',
                        style: AppTheme.lightTheme.textTheme.titleMedium?.copyWith(
                          color: AppTheme.lightTheme.colorScheme.onSurface,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      SizedBox(height: 1.h),
                      Container(
                        padding: EdgeInsets.all(2.w),
                        decoration: BoxDecoration(
                          border: Border.all(
                            color: AppTheme.lightTheme.colorScheme.outline,
                          ),
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Column(
                          children: _batches.map((batch) {
                            return CheckboxListTile(
                              title: Text('Batch $batch'),
                              value: _selectedBatches.contains(batch),
                              onChanged: (bool? value) {
                                setState(() {
                                  if (value == true) {
                                    _selectedBatches.add(batch);
                                  } else {
                                    _selectedBatches.remove(batch);
                                  }
                                });
                              },
                              activeColor: AppTheme.lightTheme.colorScheme.primary,
                            );
                          }).toList(),
                        ),
                      ),
                      
                      SizedBox(height: 3.h),
                      
                      // Location Info
                      Container(
                        padding: EdgeInsets.all(3.w),
                        decoration: BoxDecoration(
                          color: _currentLocation != null 
                              ? Colors.green.withValues(alpha: 0.1)
                              : AppTheme.lightTheme.colorScheme.errorContainer.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: _currentLocation != null 
                                ? Colors.green.withValues(alpha: 0.3)
                                : AppTheme.lightTheme.colorScheme.error.withValues(alpha: 0.3),
                          ),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              _currentLocation != null ? Icons.location_on : Icons.location_off,
                              color: _currentLocation != null ? Colors.green : AppTheme.lightTheme.colorScheme.error,
                              size: 5.w,
                            ),
                            SizedBox(width: 2.w),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    _currentLocation != null ? 'Location Verified' : 'Location Not Available',
                                    style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(
                                      color: _currentLocation != null ? Colors.green.shade700 : AppTheme.lightTheme.colorScheme.error,
                                      fontWeight: FontWeight.w600,
                                    ),
                                  ),
                                  if (_currentLocation != null) ...[
                                    SizedBox(height: 0.5.h),
                                    Text(
                                      'Accuracy: ${_currentLocation!.accuracy.toStringAsFixed(0)}m',
                                      style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(
                                        color: Colors.green.shade600,
                                      ),
                                    ),
                                  ],
                                ],
                              ),
                            ),
                            if (_currentLocation == null)
                              TextButton(
                                onPressed: _getCurrentLocation,
                                child: Text('Retry'),
                              ),
                          ],
                        ),
                      ),
                      
                      SizedBox(height: 2.h),
                      
                      // Error Message
                      if (_error != null)
                        Container(
                          width: double.infinity,
                          padding: EdgeInsets.all(3.w),
                          decoration: BoxDecoration(
                            color: AppTheme.lightTheme.colorScheme.errorContainer.withValues(alpha: 0.1),
                            borderRadius: BorderRadius.circular(8),
                            border: Border.all(
                              color: AppTheme.lightTheme.colorScheme.error.withValues(alpha: 0.3),
                            ),
                          ),
                          child: Row(
                            children: [
                              Icon(
                                Icons.error_outline,
                                color: AppTheme.lightTheme.colorScheme.error,
                                size: 5.w,
                              ),
                              SizedBox(width: 2.w),
                              Expanded(
                                child: Text(
                                  _error!,
                                  style: AppTheme.lightTheme.textTheme.bodyMedium?.copyWith(
                                    color: AppTheme.lightTheme.colorScheme.error,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      
                      SizedBox(height: 2.h),
                      
                      // Info Box
                      Container(
                        padding: EdgeInsets.all(3.w),
                        decoration: BoxDecoration(
                          color: AppTheme.lightTheme.colorScheme.primaryContainer.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: AppTheme.lightTheme.colorScheme.primary.withValues(alpha: 0.2),
                          ),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              Icons.info,
                              color: AppTheme.lightTheme.colorScheme.primary,
                              size: 5.w,
                            ),
                            SizedBox(width: 2.w),
                            Expanded(
                              child: Text(
                                'Session will be active for 5 minutes. Students within 500m radius can mark attendance.',
                                style: AppTheme.lightTheme.textTheme.bodySmall?.copyWith(
                                  color: AppTheme.lightTheme.colorScheme.onSurfaceVariant,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            
            // Actions
            Container(
              padding: EdgeInsets.all(4.w),
              decoration: BoxDecoration(
                color: AppTheme.lightTheme.colorScheme.surface,
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(16),
                  bottomRight: Radius.circular(16),
                ),
              ),
              child: Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: _isLoading ? null : () => Navigator.of(context).pop(false),
                      style: OutlinedButton.styleFrom(
                        padding: EdgeInsets.symmetric(vertical: 2.h),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: Text('Cancel'),
                    ),
                  ),
                  SizedBox(width: 3.w),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: _isLoading ? null : _createSession,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppTheme.lightTheme.colorScheme.primary,
                        foregroundColor: Colors.white,
                        padding: EdgeInsets.symmetric(vertical: 2.h),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: _isLoading
                          ? SizedBox(
                              height: 2.h,
                              width: 2.h,
                              child: CircularProgressIndicator(
                                color: Colors.white,
                                strokeWidth: 2,
                              ),
                            )
                          : Text('Start Session'),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
